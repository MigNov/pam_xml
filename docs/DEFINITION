PAM XML DEFINITION FILE
=======================

The PAM XML definition file have to begin by pam-definition root node with mandatory
argument of version and optional success and error global arguments.

After this definition functional node should be present, e.g. authentication node.
For functional nodes the default return value could be defined using the "default"
keyword. This value defaults to "error" if not set, however, no harm setting it
once again.

This node could contain operations and conditions:

1) Condition block
------------------

Condition keyword can take "user" argument to verify the username, or "type" argument
with options "isNull" or simply "null" (or "NULL"), "ne" as non-equal sign or "eq" as
equal sign. The arg1 should be the first variable name and the arg2 should be the second
variable name with exceptions of "string:" or "contains:" prefixes that specify we're
working with the strings and not variables. The "string:" specifies we need the variable
in the second arg to match string after the colon and "contains:" specifies we need that
variable to contain string after the colon sign.

2) Read block
-------------

Types support:
	- file
	- binary
	- return-code
	- url
	- input

The read block can take one of three options for "type" argument: file, url, input, binary
or return-code.
Type "file" can be used to read the file specified by "data" argument from the filesystem.
The result of this filewill be saved to variable referenced by the "output" argument.
The "url" type can be used to access the URL, typically a web server, defined in the
"data" argument with variable between percent signs (%) substituted by the variable
values. There are also some special variables like %USERNAME% that will be substituted
by the username of the user being logged-in or %RHOST% that will be substituted by
remote hostname (in case of SSH connection - will be NULL for case of local connection).
The "input" type will show user a prompt defined in "data" with optional echoing based
on the "echo" attribute for the "data" argument, this attribute defaults to false.
The "binary" type can read the output of the executable (most likely binary) file.
The "return-code" type can open a write descriptor the a specified executable file and
pass "input" string to the executable. The output is the return value that will be saved
into the variable.

For all cases the value saved to "output" argument is NULL if read fails (file does not
exist, URL is not accessible, user breaks execution of PAM_CONV dialog etc.).

3) Variable node
----------------

The variable node can be used to modify the variable values. Usually to set another value
or delete a value.

To set a value you have to provide 2 arguments and the value in the tag body. First argument
have to be type argument set to "set" keyword and second have to be the name of the variable
to be set. The tag body will be used as the variable referenced in the "name" argument in
it's string form.

To delete a value (and free memory) the type should be "del" with the name argument as the
reference to variable to be freed.

4) Convert node
---------------

Convert keyword is the converter of one argument type to another. Usually it can be used to
convert string to integer type by settings type to "numeric" and input to name of the input
variable. The tag body specifies the name of the variable to store converted value to.

5) Generator node
-----------------

Generator node is the node to generate random value of size defined in "size" argument. This
argument have to be an integer variable, as previously converted by convert function (4).
This node also defines the argument 'type' which can have one of the following values to
generate a random string according to user needs: numeric, alphanumeric, hexadecimal, alpha.
Resulting code will be stored in the variable specified by tag body.

6) Return node
--------------

The return node specifies we want to return from the function at this point. The tag body can
be either "success" or "error" which specifies the return value as defined in the root node.

7) Database node
----------------

Database node specifies the database connection along with the SELECT statement to verify the
authentication. It accepts mainly the "type" argument (currently only 'pgsql' type is supported),
"connstr" argument with the connection string to be used to connect to database. The connection
string can be read from the file using the file:// handler, with optional base64 encoding using
the file+b64:// handler. The password could be preprocessed by specifying the "password-preprocess"
definition with optional hashing algorithm application on this preprocessed string - this can be
specified by setting up "alg" attribute of the database node.

Within this node the select subnode should be provided to identify how the authentication should
be verified. The select node should have the "table", "field" and "condition" arguments defined.
The preprocessed password is available in the %PREPPASSWORD% variable, if defined.
The example definition to read base64 encoded connection string from /etc/pam.rules/connstr.b64
file, preprocess the password as: SHA256('$USERNAME:Realm:PASSWORD'), and run query as:
SELECT COUNT(*) FROM users WHERE userid = $USERNAME AND password = SHA256('$USERNAME:Realm:PASSWORD')

can be defined as follows:

<database type="pgsql" connstr="file+b64:///etc/pam.rules/connstr.b64" password-preprocess="%USERNAME%:Member:%PLAINPASSWORD%" alg="SHA256">
	<select table="users" field="COUNT(*)" condition="userid = '%USERNAME%' AND password = '%PREPPASSWORD%'">count</select>
</database>

8) Env node
-----------

Environment node can specify the enviroment variables specified by the "name" attribute of the node. The body
of this argument is not being substituted from variables because of the security reasons. It is useful to e.g.
setup the authentication type or any other environment variables. All the variable names are being prefixed
by "PAM_XML_" string.

Example: <env name="AUTH_TYPE">test</env>

This will set the environment variable PAM_XML_AUTH_TYPE to value of "test". This variable can be accessed from
within the user shell, e.g. echo $PAM_XML_AUTH_TYPE from bash shell.

