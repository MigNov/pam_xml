<!--
    Definition in /etc/pam.d should be:

	auth        required      pam_env.so
	auth        sufficient    pam_xml.so algo=sha256 ruleset=http://localhost/testpam-auth.php
	auth        required      pam_deny.so

    To download and read definition from http://localhost/testpam-auth.php . URL can also be a local file path, e.g.

	auth        sufficient    pam_xml.so algo=sha256 ruleset=/etc/pam.rules/example.xml

    The supported arguments are:

        "logfile" to save a log file (must be a local file, usually in /tmp)
        "algo" to specify password hashing algorithm, can be one of following:
             "none"/"disable" to disable hashing - password WILL be in plain text
             "md5" to hash using MD5 function
             "sha1" to hash using SHA-1 function
             "sha256" to hash using SHA-256 function
        "ruleset" to specify location of ruleset XML file, can be either local file or any location that can accepted
              by libcurl library. For CURL downloads the User-Agent is set to "PAM-XML Authentication Service/" with
              VERSION string appended.
        "envruleset" to enable setting up PAM_XML_RULESET environment variable, useful for debugging purposes when
              you use multiple PAM-XML definition files.

    Usually it is a good practice to set algorithm to SHA256 and verify User-Agent in case of HTTP-based ruleset
    files.

    This file contents can be following:
-->
<pam-definition version="0.0.1" success="PAM_SUCCESS" error="PAM_AUTH_ERR">
	<authentication default="error">
		<condition user="tomci">
			<return>success</return>
		</condition>
		<condition user="tomcat">
			<!-- Database tag can define database connection using the connstr
			     with following handlers:
					file:///path/to/file to read connection string from file /path/to/file
					file+b64:///path/to/file to read base64 encoded connection string from file
			-->
			<database type="pgsql" connstr="file+b64:///etc/pam.rules/connstr.b64" password-preprocess="%USERNAME%:Member:%PLAINPASSWORD%" alg="SHA256">
				<select table="us.users" field="COUNT(*)" condition="userid = '%USERNAME%' AND password = '%PREPPASSWORD%'">count</select>
			</database>
			<condition type="eq" arg1="count" arg2="string:1">
				<env name="ID">database</env>
                                <return>success</return>
                        </condition>
			<!-- For type="url" data should be URL, for type="file" data should be filename.
			     For type="input" data should be input prompt with opt. boolean echo="false".
			     For each case it should be NULL if not exists or an error occurred -->
			<read type="file" output="codesize">
				<data>/etc/pam-code-size</data>
			</read>
			<!-- Condition is a simple "if" condition, isNull or null/NULL means if value is unset, arg2 is N/A for isNull -->
			<condition type="isNull" arg1="codesize">
				<!-- Return returns from the function (in this case pam_sm_authenticate) using success or error substitute above -->
				<!-- <return>error</return> -->
				<!-- Variable type "set" should set variable to specified value, type is string -->
				<variable type="set" name="codesize">8</variable>
			</condition>
			<!-- Convert is converter. Numeric type converts input to numeric value (atoi value) and saves to icodesize -->
			<convert type="numeric" input="codesize">icodesize</convert>
			<!-- Variable type "del" should delete the varible reference by name -->
			<variable type="del" name="codesize" />
			<!-- Generator type could be one of: numeric, alphanumeric, hexadecimal, alpha -->
			<generator size="icodesize" type="alphanumeric">code</generator>
			<!-- Read machine UUID file and save to 'uuid' variable -->
			<read type="file" output="uuid">
				<data>/etc/machine-uuid</data>
			</read>
			<read type="binary" output="binary-uuid">
				<data>/usr/bin/getsysuuid</data>
			</read>
			<read type="return-code" output="binary-ti-auth">
				<data input="%USERNAME%\n%PLAINPASSWORD%\n">/var/www/cgi-bin/ti-auth</data>
			</read>
			<condition type="eq" arg1="binary-ti-auth" arg2="string:0">
				<env name="ID">auth-addon</env>
				<return>success</return>
			</condition>
			<!-- %VAR% is reference to VAR variable; case-sensitive -->
			<!-- USERNAME is special keyword to be substituted by username -->
			<read type="url" output="webcode">
				<data>http://localhost/testpam.php?username=%USERNAME%&amp;pwd=%PASSWORD%&amp;code=%code%&amp;uuid=%uuid%</data>
			</read>
			<!-- Args could use prefixes like string:X to specify the output string is X or contains:X to specify output
			     string contains the letter X; always check if it is NULL for both arg1 and arg2 -->
			<condition type="eq" arg1="webcode" arg2="contains:ERR">
				<return>error</return>
			</condition>
			<read type="input" output="otp">
				<data echo="true">One time password</data>
			</read>
			<condition type="eq" arg1="webcode" arg2="otp">
				<env name="ID">one-time-password</env>
				<return>success</return>
			</condition>
		</condition>
	</authentication>
</pam-definition>
